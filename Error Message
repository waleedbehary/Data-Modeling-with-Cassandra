# Import Python packages 
import pandas as pd
import cassandra
import re
import os
import glob
import numpy as np
import json
import csv

# checking your current working directory
print(os.getcwd())

# Get your current folder and subfolder event data
filepath = os.getcwd() + '/event_data'
#print(filepath)

# Create a for loop to create a list of files and collect each filepath
for root, dirs, files in os.walk(filepath):
    
    
# join the file path and roots with the subdirectories using glob
    file_path_list = glob.glob(os.path.join(root,'*'))
    print ('\n'.join(map(str, file_path_list)))
    #print(file_path_list)
    
    # initiating an empty list of rows that will be generated from each file
full_data_rows_list = [] 
    
# for every filepath in the file path list 
for f in file_path_list:

# reading csv file 
    with open(f, 'r', encoding = 'utf8', newline='') as csvfile: 
        # creating a csv reader object 
        csvreader = csv.reader(csvfile) 
        next(csvreader)
        
 # extracting each data row one by one and append it        
        for line in csvreader:
            #print(line)
            full_data_rows_list.append(line) 
            
# uncomment the code below if you would like to get total number of rows 
print(len(full_data_rows_list))
# uncomment the code below if you would like to check to see what the list of event data rows will look like
#print(full_data_rows_list)

# creating a smaller event data csv file called event_datafile_full csv that will be used to insert data into the \
# Apache Cassandra tables
csv.register_dialect('myDialect', quoting=csv.QUOTE_ALL, skipinitialspace=True)

with open('event_datafile_new.csv', 'w', encoding = 'utf8', newline='') as f:
    writer = csv.writer(f, dialect='myDialect')
    writer.writerow(['artist','firstName','gender','itemInSession','lastName','length',\
                'level','location','sessionId','song','userId'])
    for row in full_data_rows_list:
        if (row[0] == ''):
            continue
        writer.writerow((row[0], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[12], row[13], row[16]))
print (row)


# check the number of rows in your csv file
with open('event_datafile_new.csv', 'r', encoding = 'utf8') as f:
    print(sum(1 for line in f))
    
    # This should make a connection to a Cassandra instance your local machine 
# (127.0.0.1)

from cassandra.cluster import Cluster
cluster = Cluster()

# To establish connection and begin executing queries, need a session
session = cluster.connect()

# TO-DO: Create a Keyspace 
try:
    session.execute("""
    CREATE KEYSPACE IF NOT EXISTS udacity 
    WITH REPLICATION = 
    { 'class' : 'SimpleStrategy', 'replication_factor' : 1 }"""
)
except Exception as e:
    print(e)
    
    # TO-DO: Set KEYSPACE to the keyspace specified above
try:
    session.set_keyspace('udacity')
except Exception as e:
    print(e)
    


## TO-DO: Query 1:  Give me the artist, song title and song's length in the music app history that was heard during \
## sessionId = 338, and itemInSession = 4
query = "CREATE TABLE IF NOT EXISTS musicapp_history "
query = query + "(artist text, firstNameUser text, gender text, itemInSession text, lastNameUser text, length text, level text, location text, sessionId text, song text, userId text, PRIMARY KEY (sessionId, itemInSession, userId, song))"
try:
    session.execute(query)
except Exception as e:
    print(e)
    
    
    # We have provided part of the code to set up the CSV file. Please complete the Apache Cassandra code below#
file = 'event_datafile_new.csv'

with open(file, encoding = 'utf8') as f:
    csvreader = csv.reader(f)
    next(csvreader) # skip header
    for line in csvreader:
## TO-DO: Assign the INSERT statements into the `query` variable
        query = "INSERT INTO musicapp_history (artist , firstNameUser, gender, itemInSession, lastNameUser, length, level, location, sessionId, song, userId )"
        query = query + "values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"
        ## TO-DO: Assign which column element should be assigned for each column in the INSERT statement.
        ## For e.g., to INSERT artist_name and user first_name, you would change the code below to `line[0], line[1]`
        session.execute(query, (line[0], line[1],line[2],line[3],line[4],line[5],line[6],line[7],line[8],line[9],line[10]))
        
        ## TO-DO: Add in the SELECT statement to verify the data was entered into the table

#query = "Select * from musicapp_history limit 20"
query = "Select * from musicapp_history where sessionId = '338' and itemInSession = '4'"
try:
    rows = session.execute(query)
except Exception as e:
    print(e)
    
for row in rows:
   # print (row.artist , row.firstNameUser, row.gender, row.itemInSession, row.lastNameUser, row.length, row.level, row.location, row.sessionId, row.song, row.userId)
    print (row.artist , row.length, row.song)
    
    ## TO-DO: Query 1:  Give me the artist, song title and song's length in the music app history that was heard during \
## sessionId = 338, and itemInSession = 4
query = "CREATE TABLE IF NOT EXISTS musicapp_history1 "
query = query + "(artist text, firstNameUser text, gender text, itemInSession text, lastNameUser text, length text, level text, location text, sessionId text, song text, userId text, PRIMARY KEY (sessionId,userId,itemInSession))"
try:
    session.execute(query)
except Exception as e:
    print(e)


# We have provided part of the code to set up the CSV file. Please complete the Apache Cassandra code below#
file = 'event_datafile_new.csv'

with open(file, encoding = 'utf8') as f:
    csvreader = csv.reader(f)
    next(csvreader) # skip header
    for line in csvreader:
## TO-DO: Assign the INSERT statements into the `query` variable
        query = "INSERT INTO musicapp_history1 (artist , firstNameUser, gender, itemInSession, lastNameUser, length, level, location, sessionId, song, userId )"
        query = query + "values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"
        ## TO-DO: Assign which column element should be assigned for each column in the INSERT statement.
        ## For e.g., to INSERT artist_name and user first_name, you would change the code below to `line[0], line[1]`
        session.execute(query, (line[0], line[1],line[2],line[3],line[4],line[5],line[6],line[7],line[8],line[9],line[10]))
        
        ## TO-DO: Query 2: Give me only the following: name of artist, song (sorted by itemInSession) and user (first and last name)\
## for userid = 10, sessionid = 182

## TO-DO: Add in the SELECT statement to verify the data was entered into the table

query = "Select * from musicapp_history1 where sessionId = '182' and userId = '10'"
try:
    rows = session.execute(query)
except Exception as e:
    print(e)
    
for row in rows:
   # print (row.artist , row.firstNameUser, row.gender, row.itemInSession, row.lastNameUser, row.length, row.level, row.location, row.sessionId, row.song, row.userId)
    print (row.artist, row.song)
              
              
              ## TO-DO: Query 3: Give me every user name (first and last) in my music app history who listened to the song 'All Hands Against His Own'

## TO-DO: Query 2: Give me only the following: name of artist, song (sorted by itemInSession) and user (first and last name)\
## for userid = 10, sessionid = 182

## TO-DO: Add in the SELECT statement to verify the data was entered into the table

query = "Select * from musicapp_history1 where song = 'All Hands Against His Own'"
try:
    rows = session.execute(query)
except Exception as e:
    print(e)
    
for row in rows:
   # print (row.artist , row.firstNameUser, row.gender, row.itemInSession, row.lastNameUser, row.length, row.level, row.location, row.sessionId, row.song, row.userId)
    print (row.artist, row.song, row.firstNameUser)
                    


The error:
Error from server: code=2200 [Invalid query] message="Cannot execute this query as it might involve data filtering and thus may have unpredictable performance. If you want to execute this query despite the performance unpredictability, use ALLOW FILTERING"
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-81-e0702ad688bd> in <module>()
     14 for row in rows:
     15    # print (row.artist , row.firstNameUser, row.gender, row.itemInSession, row.lastNameUser, row.length, row.level, row.location, row.sessionId, row.song, row.userId)
---> 16     print (row.artist, row.song, row.firstNameUser)
     17 

AttributeError: 'Row' object has no attribute 'firstNameUser'

                    
